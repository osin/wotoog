<?php

namespace Wotoog\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Wotoog\BlogBundle\WotoogBlogBundle;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    function getRecentPosts(\Wotoog\BlogBundle\Entity\Blog $blog, $limit, $page = 1){
        return
            $this->_em->createQueryBuilder()
            ->select('p')
            ->from($this->_entityName, 'p')
            ->where('p.blog =:blog')
            ->setParameter('blog', $blog)
            ->setMaxResults($limit)
            ->orderBy('p.createdAt', 'DESC')
            ->setFirstResult(($page-1) * $limit)
            ->getQuery()
            ->getResult();
    }

    function count(\Wotoog\BlogBundle\Entity\Blog $blog){
        return $this->createQueryBuilder('c')
            ->select('COUNT(c)')
            ->where('c.blog =:blog')
            ->andWhere('c.deleted = 0')
            ->setParameter('blog', $blog)
            ->getQuery()
            ->getSingleScalarResult();
        ;
    }

    function getNext($post){
        return
            $this->_em->createQueryBuilder()
                ->select('next')
                ->from($this->_entityName, 'next')
                ->where('next.blog =:blog')
                ->andWhere('next.id > current_id')
                ->setParameter('blog', $post->getBlog())
                ->setParameter('current_id', $post->getId())
                ->setMaxResults(1)
                ->orderBy('p.createdAt', 'ASC')
                ->getQuery()
                ->getOneOrNullResult();
    }

    function getPrÃ©vious($post){
        return
            $this->_em->createQueryBuilder()
                ->select('next')
                ->from($this->_entityName, 'next')
                ->where('next.blog =:blog')
                ->andWhere('next.id < current_id')
                ->setParameter('blog', $post->getBlog())
                ->setParameter('current_id', $post->getId())
                ->setMaxResults(1)
                ->orderBy('p.createdAt', 'DESC')
                ->getQuery()
                ->getOneOrNullResult();
    }
}